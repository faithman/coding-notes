{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my coding notes I would like to take notes for the skills about coding here, as well as some ideas flashed in my mind. About me My name is Ye Wang. I worked as an assistant research fellow in Chengdu Research Base of Giant Panda Breeding. I am interested in genome assembly, pan-genomics of giant panda and other endangered animals.","title":"Home"},{"location":"#welcome-to-my-coding-notes","text":"I would like to take notes for the skills about coding here, as well as some ideas flashed in my mind.","title":"Welcome to my coding notes"},{"location":"#about-me","text":"My name is Ye Wang. I worked as an assistant research fellow in Chengdu Research Base of Giant Panda Breeding. I am interested in genome assembly, pan-genomics of giant panda and other endangered animals.","title":"About me"},{"location":"Data_transfer/","text":"Data_transfer Data_transfer SCP rsync Synchronization between two local folder Dry run before starting rsync commands Sync with remote server This note is for how to transfer data from local to remote, or between two servers. SCP SCP is useful when transfer data between two server using ssh protocol. scp -r <username@remote_host>:<remote directory> <local directory> # For example scp -r wangye@192.168.38.73:/mnt/ntfs1/tanpeng26034/X101SC19030851_panda_Data_Release_20210225 /mnt/raw_data/data_wangye/DNA rsync rsync is a remote and local file synchronization tool. It uses an algorithm that minimizes the amount of data copied by only moving the portions of files that have changed. Synchronization between two local folder rsync -a <dir1/> <dir2> !!! Note The \"/\" after the first directory is necessery. Dry run before starting rsync commands The -n or --dry-run options give you the chance to double-check your argument and commands before you run it formally. rsync -anv <dir1/> <dir2> Sync with remote server This is similar with scp . But scp is preferred by day to day work, while rsync is preferred by recurring tasks which need to be repeated for a certain time. But, scp can be used to transfer data between two remote servers, which rsync is only allow to transfer data from local to remote server. rsync -a <username@remote_host>:<remote directory> <local directory> -P flag is very help as it allows you to resume job is it interrupped accidently. It also can give you a progress bar to track the progress intutively. rsync -aPv <username@remote_host>:<remote directory> <local directory> However, if the port is not 21 or 22, you need to specify the remote port by yourself. Here is the example. rsync -aPv -e 'ssh -p 9222' /mnt/raw_data/ WangYe@192.168.3.134:/home/WangYe/data_back_up","title":"Data transfer"},{"location":"Data_transfer/#data_transfer","text":"Data_transfer SCP rsync Synchronization between two local folder Dry run before starting rsync commands Sync with remote server This note is for how to transfer data from local to remote, or between two servers.","title":"Data_transfer"},{"location":"Data_transfer/#scp","text":"SCP is useful when transfer data between two server using ssh protocol. scp -r <username@remote_host>:<remote directory> <local directory> # For example scp -r wangye@192.168.38.73:/mnt/ntfs1/tanpeng26034/X101SC19030851_panda_Data_Release_20210225 /mnt/raw_data/data_wangye/DNA","title":"SCP"},{"location":"Data_transfer/#rsync","text":"rsync is a remote and local file synchronization tool. It uses an algorithm that minimizes the amount of data copied by only moving the portions of files that have changed.","title":"rsync"},{"location":"Data_transfer/#synchronization-between-two-local-folder","text":"rsync -a <dir1/> <dir2> !!! Note The \"/\" after the first directory is necessery.","title":"Synchronization between two local folder"},{"location":"Data_transfer/#dry-run-before-starting-rsync-commands","text":"The -n or --dry-run options give you the chance to double-check your argument and commands before you run it formally. rsync -anv <dir1/> <dir2>","title":"Dry run before starting rsync commands"},{"location":"Data_transfer/#sync-with-remote-server","text":"This is similar with scp . But scp is preferred by day to day work, while rsync is preferred by recurring tasks which need to be repeated for a certain time. But, scp can be used to transfer data between two remote servers, which rsync is only allow to transfer data from local to remote server. rsync -a <username@remote_host>:<remote directory> <local directory> -P flag is very help as it allows you to resume job is it interrupped accidently. It also can give you a progress bar to track the progress intutively. rsync -aPv <username@remote_host>:<remote directory> <local directory> However, if the port is not 21 or 22, you need to specify the remote port by yourself. Here is the example. rsync -aPv -e 'ssh -p 9222' /mnt/raw_data/ WangYe@192.168.3.134:/home/WangYe/data_back_up","title":"Sync with remote server"},{"location":"git_and_github/","text":"Git and Github Git and Github Workflow for create new repo locally and remotely Git configure notes Workflow for create new repo locally and remotely Create a new repository on Github Open terminal and create a new project folder Initialize the new project folder with git git init Add files included in this new project folder git add . Commit the files staged in local repository git commit -m \"First commit\" Copy the remote repository URL and connect it with local repo git remote add origin remote <repository URL> # After build the connect, you need to double check if it sucessed. # Use git remove -v to verifies the new remote URL git remote -v Push the changes in your local repository to Github git push -u origin master or set master branch as the upstream branch git push --set-upstream origin master Git configure notes Configure git # Configure git with user name git config --global user.name \"your_username\" # Configure git with user email git config --global user.email \"your_email_address@example.com\" # List all global configuration of git git config --global --list Check if git successfully connected to github # This will tell if connection built ssh -T git@github.com # If the connection built, this command will output something. git ls-remote https://github.com/git/git Be careful to use git host The host configurations are listed in /etc/hosts , some invalid hosts may affect the connection between local and github. If you got error like fatal: unable to access 'https://github.com/planety/logue/': Failed to connect to github.com port 443: Operation timed out , you should check the host file.","title":"Github"},{"location":"git_and_github/#git-and-github","text":"Git and Github Workflow for create new repo locally and remotely Git configure notes","title":"Git and Github"},{"location":"git_and_github/#workflow-for-create-new-repo-locally-and-remotely","text":"Create a new repository on Github Open terminal and create a new project folder Initialize the new project folder with git git init Add files included in this new project folder git add . Commit the files staged in local repository git commit -m \"First commit\" Copy the remote repository URL and connect it with local repo git remote add origin remote <repository URL> # After build the connect, you need to double check if it sucessed. # Use git remove -v to verifies the new remote URL git remote -v Push the changes in your local repository to Github git push -u origin master or set master branch as the upstream branch git push --set-upstream origin master","title":"Workflow for create new repo locally and remotely"},{"location":"git_and_github/#git-configure-notes","text":"Configure git # Configure git with user name git config --global user.name \"your_username\" # Configure git with user email git config --global user.email \"your_email_address@example.com\" # List all global configuration of git git config --global --list Check if git successfully connected to github # This will tell if connection built ssh -T git@github.com # If the connection built, this command will output something. git ls-remote https://github.com/git/git Be careful to use git host The host configurations are listed in /etc/hosts , some invalid hosts may affect the connection between local and github. If you got error like fatal: unable to access 'https://github.com/planety/logue/': Failed to connect to github.com port 443: Operation timed out , you should check the host file.","title":"Git configure notes"},{"location":"mkdocs/","text":"MkDocs MkDocs Create new project Preview project Deploy project on github pages MkDocs is a very nice documentation system. I use it to take notes for coding and deployed my mkdocs project on github pages. Create new project mkdocs new <my-project> Preview project mkdocs serve This will show you the preview page before it been published. Deploy project on github pages Once you finish the writing, you can push the project dir to github repo. The mkdocs gh-deploy command can help to delpoy project and gerate static web page automatically. All you need to do is to perform the following commands in the project directory. The static web will be pushed to gh-pages branch mkdocs gh-deploy --clean !!! Note You need to preset the `pages` in the `Settings` to build github page site from `gh-pages` branch.","title":"MkDocs"},{"location":"mkdocs/#mkdocs","text":"MkDocs Create new project Preview project Deploy project on github pages MkDocs is a very nice documentation system. I use it to take notes for coding and deployed my mkdocs project on github pages.","title":"MkDocs"},{"location":"mkdocs/#create-new-project","text":"mkdocs new <my-project>","title":"Create new project"},{"location":"mkdocs/#preview-project","text":"mkdocs serve This will show you the preview page before it been published.","title":"Preview project"},{"location":"mkdocs/#deploy-project-on-github-pages","text":"Once you finish the writing, you can push the project dir to github repo. The mkdocs gh-deploy command can help to delpoy project and gerate static web page automatically. All you need to do is to perform the following commands in the project directory. The static web will be pushed to gh-pages branch mkdocs gh-deploy --clean !!! Note You need to preset the `pages` in the `Settings` to build github page site from `gh-pages` branch.","title":"Deploy project on github pages"}]}